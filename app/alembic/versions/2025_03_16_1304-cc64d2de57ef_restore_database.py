"""restore database

Revision ID: cc64d2de57ef
Revises: 
Create Date: 2025-03-16 13:04:12.921641

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'cc64d2de57ef'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('colors', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('gender', sa.String(), nullable=False),
    sa.Column('sizes', sa.ARRAY(sa.Integer()), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__products')),
    sa.UniqueConstraint('name', name=op.f('uq__products__name'))
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.LargeBinary(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("TIMEZONE('UTC', now())"), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__users')),
    sa.UniqueConstraint('email', name=op.f('uq__users__email')),
    sa.UniqueConstraint('id', name=op.f('uq__users__id'))
    )
    op.create_table('carts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('userId', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name=op.f('fk__carts__userId__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__carts')),
    sa.UniqueConstraint('id', name=op.f('uq__carts__id'))
    )
    op.create_table('orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('userId', sa.UUID(), nullable=False),
    sa.Column('totalPrice', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("TIMEZONE('UTC', now())"), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name=op.f('fk__orders__userId__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__orders')),
    sa.UniqueConstraint('id', name=op.f('uq__orders__id'))
    )
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('comment', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("TIMEZONE('UTC', now())"), nullable=False),
    sa.Column('userId', sa.UUID(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name=op.f('fk__reviews__productId__products'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name=op.f('fk__reviews__userId__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__reviews')),
    sa.UniqueConstraint('id', name=op.f('uq__reviews__id'))
    )
    op.create_table('cart_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cartId', sa.UUID(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cartId'], ['carts.id'], name=op.f('fk__cart_items__cartId__carts'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name=op.f('fk__cart_items__productId__products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__cart_items'))
    )
    op.create_table('order_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('orderId', sa.UUID(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('color', sa.String(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['orderId'], ['orders.id'], name=op.f('fk__order_items__orderId__orders'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name=op.f('fk__order_items__productId__products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__order_items'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('order_items')
    op.drop_table('cart_items')
    op.drop_table('reviews')
    op.drop_table('orders')
    op.drop_table('carts')
    op.drop_table('users')
    op.drop_table('products')
    # ### end Alembic commands ###
